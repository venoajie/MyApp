

# installed
import asyncio
import aiohttp
import json
import orjson
from dataclassy import dataclass
from loguru import logger as log

@dataclass
class Config:
    verify_ssl: bool = True
    tcp_connections: int = 5

class RestClient:
    """A generic HTTP Rest client.
    https://codereview.stackexchange.com/questions/269049/python-restclient-class-with-asyncio-and-aiohttp
    https://stackoverflow.com/questions/72095325/what-is-the-fastest-way-to-make-7000-api-calls-and-transform-the-data-with-panda
    """

    def __init__(self, config: Config = None) -> None:
        self.config = Config() if config is None else config
        assert isinstance(self.config, Config)

    async def __aenter__(self):
        self._con = aiohttp.TCPConnector(
            verify_ssl=self.config.verify_ssl, limit=self.config.tcp_connections
        )
        self._session = aiohttp.ClientSession(connector=self._con)
        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self._session.close()
        await self._con.close()

    async def request(
        self,
        method: str,
        url: str,
        query_param: dict = None,
        headers: dict = None,
        body: json = None,
    ):
        """Performs an Async HTTP request.

        Args:
            method (str): request method ('GET', 'POST', 'PUT', ).
            url (str): request url.
            query_param (dict or None): url query parameters.
            header (dict or None): request headers.
            body (json or None): request body in case of method POST or PUT.
        """
        assert isinstance(method, str)
        assert isinstance(url, str)

        method = method.upper()
        assert method in ("GET",)  # TODO: Add ("POST", "PUT", "DELETE")

        headers = headers or {}

        try:
            if method == "GET":
                async with self._session.get(
                    url, params=query_param, headers=headers
                ) as response:
                    return await response.text()
        except:
            raise
            # TODO: Handle exceptions explicitly


async def main():
    async with RestClient() as client:
        currency: str = 'ETH'
        time_frame = 'm5'
        symbol: str = 'ETH-PERPETUAL'
        headers: list = {
                "accept": "application/json",
                "coinglassSecret": "877ad9af931048aab7e468bda134942e"
            }
        end_point= (f'https://open-api.coinglass.com/public/v2/open_interest?symbol={currency}')
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response 
        log.info(response_data)
        end_point= (f'https://open-api.coinglass.com/public/v2/open_interest?symbol={currency}')
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response 
        log.info(response_data)
        end_point= (f'https://open-api.coinglass.com/public/v2/open_interest_history?symbol={currency}&time_type={time_frame}&currency={currency}')
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response 
        log.error(response_data)
        end_point= (f'https://open-api.coinglass.com/public/v2/indicator/open_interest_aggregated_ohlc?symbol={currency}&interval={time_frame}')
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response 
        log.info(response_data)
        end_point= (f'https://test.deribit.com/api/v2/public/get_currencies?')
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response ['result']
        log.warning(response_data)
        end_point= (f'https://test.deribit.com/api/v2/public/get_currencies?')
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response ['result']
        log.error(response_data)
        end_point= (f'https://test.deribit.com/api/v2/public/get_instruments?currency=ETH&expired=false')
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response ['result']
        log.critical(response_data)


async def main2(end_point):
    async with RestClient() as client:
        log.critical(end_point)
        response = (await client.request(method="GET", url=end_point))
        response: dict = orjson.loads(response)
        response_data: dict = response 
        log.critical(response_data)


if __name__ == "__main__":

    currency: str = 'ETH'
    time_frame = 'm5'

    end_point1= (f'https://open-api.coinglass.com/public/v2/open_interest?symbol={currency}')
    end_point2= (f'https://open-api.coinglass.com/public/v2/open_interest?symbol={currency}')
    end_point3= (f'https://open-api.coinglass.com/public/v2/open_interest_history?symbol={currency}&time_type={time_frame}&currency={currency}')
    end_point4= (f'https://open-api.coinglass.com/public/v2/indicator/open_interest_aggregated_ohlc?symbol={currency}&interval={time_frame}')
    end_point5= (f'https://test.deribit.com/api/v2/public/get_currencies?')
    end_point6= (f'https://test.deribit.com/api/v2/public/get_currencies?')
    end_point7= (f'https://test.deribit.com/api/v2/public/get_instruments?currency=ETH&expired=false')
    end_point8= (f'https://open-api.coinglass.com/public/v2/open_interest?symbol={currency}')
    url = [end_point7, end_point2]

    #asyncio.gather(*[main2((item)) for item in url ]) 
    loop = asyncio.get_event_loop() #asyncio.run(main()) throws an error on windows.
    loop.run_until_complete(main()) 
