#!/usr/bin/python3
# -*- coding: utf-8 -*-
# built ins
from datetime import datetime, timedelta
import asyncio
import json

# installed
import websockets
import orjson
from loguru import logger as log

# user defined formula
from utilities import pickling, system_tools, string_modification as str_mod
from configuration import id_numbering, config

from db_management import sqlite_management
from strategies import entries_exits, basic_strategy
from websocket_management.ws_management import (futures_analysis,closing_transactions,
reading_from_pkl_database, update_portfolio, resupply_sub_accountdb, update_user_changes,last_open_interest_fr_sqlite,last_tick_fr_sqlite,current_server_time,opening_transactions)

from websocket_management.cleaning_up_transactions import count_and_delete_ohlc_rows, clean_up_closed_transactions

def parse_dotenv(sub_account) -> dict:
    return config.main_dotenv(sub_account)


async def telegram_bot_sendtext(bot_message, purpose: str = "general_error") -> None:
    import deribit_get

    return await deribit_get.telegram_bot_sendtext(bot_message, purpose)


class StreamAccountData:

    """

    +----------------------------------------------------------------------------------------------+
    +----------------------------------------------------------------------------------------------+

    """

    def __init__(self, client_id: str, client_secret: str, live=True) -> None:
        # Async Event Loop
        self.loop = asyncio.get_event_loop()

        if not live:
            self.ws_connection_url: str = "wss://test.deribit.com/ws/api/v2"
        elif live:
            self.ws_connection_url: str = "wss://www.deribit.com/ws/api/v2"
        else:
            raise Exception("live must be a bool, True=real, False=paper")

        # Instance Variables
        self.connection_url: str = (
            "https://www.deribit.com/api/v2/"
            if "test" not in self.ws_connection_url
            else "https://test.deribit.com/api/v2/"
        )
        self.client_id: str = client_id
        self.client_secret: str = client_secret
        self.websocket_client: websockets.WebSocketClientProtocol = None
        self.refresh_token: str = None
        self.refresh_token_expiry_time: int = None

        # Start Primary Coroutine
        self.loop.run_until_complete(self.ws_manager())

    # @lru_cache(maxsize=None)
    async def ws_manager(self) -> None:
        async with websockets.connect(
            self.ws_connection_url,
            ping_interval=None,
            compression=None,
            close_timeout=60,
        ) as self.websocket_client:
            # Authenticate WebSocket Connection
            await self.ws_auth()

            # Establish restart procedure
            await self.on_restart()
            
            # Establish Heartbeat
            await self.establish_heartbeat()

            # Start Authentication Refresh Task
            self.loop.create_task(self.ws_refresh_auth())

            currencies = ["ETH", "BTC"]
            # for currency in currencies: isu, multiple currency could interfere each other in the calculation function
            currency = "ETH"

            my_path_instruments = system_tools.provide_path_for_file(
                "instruments", currency
            )
        
            instruments_raw = pickling.read_data(my_path_instruments)
            instruments = instruments_raw[0]["result"]

            instruments_kind: list = [
                o for o in instruments if o["kind"] == "future"
            ]

            instruments_name: list = [
                o["instrument_name"] for o in instruments_kind
            ]
            # instruments_name: list =  [o['instrument_name'] for o in instruments if o['kind'] == 'future']

            for instrument in instruments_name:

                self.loop.create_task(
                    self.ws_operation(
                        operation="subscribe",
                        ws_channel=f"incremental_ticker.{instrument}",
                    )
                )

                if "PERPETUAL" in instrument:
                    self.loop.create_task(
                        self.ws_operation(
                            operation="subscribe",
                            ws_channel=f"chart.trades.{instrument}.1",
                        )
                    )
                    self.loop.create_task(
                        self.ws_operation(
                            operation="subscribe",
                            ws_channel=f"chart.trades.{instrument}.30",
                        )
                    )
                    self.loop.create_task(
                        self.ws_operation(
                            operation="subscribe",
                            ws_channel=f"chart.trades.{instrument}.60",
                        )
                    )
                    self.loop.create_task(
                        self.ws_operation(
                            operation="subscribe",
                            ws_channel=f"chart.trades.{instrument}.1D",
                        )
                    )
                    
            self.loop.create_task(
                self.ws_operation(
                    operation="subscribe", ws_channel=f"user.portfolio.{currency}"
                )
            )

            self.loop.create_task(
                self.ws_operation(
                    operation="subscribe",
                    ws_channel=f"user.changes.any.{currency.upper()}.raw",
                )
            )
            while self.websocket_client.open:
                # Receive WebSocket messages
                message: bytes = await self.websocket_client.recv()
                message: dict = orjson.loads(message)
                message_channel: str = None
                # log.warning (message)
                if "id" in list(message):
                    if message["id"] == 9929:
                        
                        if self.refresh_token is None:
                            # await syn.get_sub_accounts()
                            log.info("Successfully authenticated WebSocket Connection")

                        else:
                            log.info(
                                "Successfully refreshed the authentication of the WebSocket Connection"
                            )

                        self.refresh_token = message["result"]["refresh_token"]

                        # Refresh Authentication well before the required datetime
                        if message["testnet"]:
                            expires_in: int = 300
                        else:
                            expires_in: int = message["result"]["expires_in"] - 240

                        self.refresh_token_expiry_time = datetime.utcnow() + timedelta(
                            seconds=expires_in
                        )

                    elif message["id"] == 8212:
                        # Avoid logging Heartbeat messages
                        continue

                elif "method" in list(message):
                    # Respond to Heartbeat Message
                    if message["method"] == "heartbeat":
                        await self.heartbeat_response()

                if "params" in list(message):
                    if message["method"] != "heartbeat":
                        message_channel = message["params"]["channel"]
                        if "PERPETUAL." in message_channel:
                            log.critical(message_channel)

                        data_orders: list = message["params"]["data"]
                        #log.info(data_orders)
                        currency: str = str_mod.extract_currency_from_text(
                            message_channel
                        )
                        #! ########################################################################################################################

                        if message_channel == f"user.portfolio.{currency.lower()}":
                            log.info(data_orders)

                            await update_portfolio(data_orders, currency)

                            await resupply_sub_accountdb(currency)
                            

                        if (
                            message_channel
                            == f"user.changes.any.{currency.upper()}.raw"
                        ):
                            log.info(data_orders)

                            await update_user_changes(data_orders, currency)

                            await resupply_sub_accountdb(currency)
                        
                        
                        DATABASE: str = "databases/trading.sqlite3"
                        TABLE_OHLC1: str = "ohlc1_eth_perp_json"
                        TABLE_OHLC30: str = "ohlc30_eth_perp_json"
                        TABLE_OHLC60: str = "ohlc60_eth_perp_json"
                        TABLE_OHLC1D: str = "ohlc1D_eth_perp_json"
                        WHERE_FILTER_TICK: str = "tick"

                        last_tick_query_ohlc1: str = sqlite_management.querying_arithmetic_operator(
                            "tick", "MAX", TABLE_OHLC1
                        )

                        last_tick_query_ohlc30: str = sqlite_management.querying_arithmetic_operator(
                            "tick", "MAX", TABLE_OHLC30
                        )
                        last_tick_query_ohlc60: str = sqlite_management.querying_arithmetic_operator(
                            "tick", "MAX", TABLE_OHLC60
                        )

                        last_tick_query_ohlc1D: str = sqlite_management.querying_arithmetic_operator(
                            "tick", "MAX", TABLE_OHLC1D
                        )

                        last_tick1_fr_sqlite: int = await last_tick_fr_sqlite(
                            last_tick_query_ohlc1
                        )


                        # gathering basic data
                        reading_from_database: dict = await reading_from_pkl_database(currency)

                        # get portfolio data
                        portfolio: list = reading_from_database["portfolio"]

                        # fetch strategies attributes
                        strategies = entries_exits.strategies

                        limit = 100
                        ratio = 0.9
                        threshold = 0.01 / 100

                        market_condition = await basic_strategy.get_market_condition(
                            threshold, limit, ratio
                        )

                        
                        
                        if "chart.trades.ETH-PERPETUAL." in message_channel:
                            

                            last_tick_fr_data_orders: int = data_orders["tick"]

                            if (
                                TABLE_OHLC30 != None
                                or TABLE_OHLC1 != None
                                or TABLE_OHLC60 != None
                                or TABLE_OHLC1 != None
                            ):

                                # log.warning(f"message_channel {message_channel}")
                                if (
                                    message_channel
                                    == "chart.trades.ETH-PERPETUAL.1"
                                ):
                                    #log.error(message_channel)
                                    #log.error(f'last_tick1_fr_sqlite {last_tick1_fr_sqlite} last_tick_fr_data_orders {last_tick_fr_data_orders} {last_tick1_fr_sqlite == last_tick_fr_data_orders}')

                                    # refilling current ohlc table with updated data
                                    if (
                                        last_tick1_fr_sqlite
                                        == last_tick_fr_data_orders
                                    ):

                                        await sqlite_management.replace_row(
                                            data_orders,
                                            "data",
                                            TABLE_OHLC1,
                                            DATABASE,
                                            WHERE_FILTER_TICK,
                                            "is",
                                            last_tick1_fr_sqlite,
                                        )

                                    # new tick ohlc
                                    else:
                                        #log.error(data_orders)
                                        # prepare query
                                        open_interest_last_value_query = sqlite_management.querying_last_open_interest(
                                            last_tick1_fr_sqlite, TABLE_OHLC1
                                        )

                                        # get current oi
                                        open_interest_last_value =  await last_open_interest_fr_sqlite(
                                            open_interest_last_value_query
                                        )

                                        # insert new ohlc data
                                        await sqlite_management.insert_tables(
                                            TABLE_OHLC1, data_orders
                                        )

                                        # update last tick
                                        last_tick1_fr_sqlite =  await last_tick_fr_sqlite(
                                            last_tick_query_ohlc1
                                        )

                                        # insert open interest in previous tick to the new tick
                                        await sqlite_management.replace_row(
                                            open_interest_last_value,
                                            "open_interest",
                                            TABLE_OHLC1,
                                            DATABASE,
                                            WHERE_FILTER_TICK,
                                            "is",
                                            last_tick1_fr_sqlite,
                                        )
                                        
                                    # to avoid error if index price/portfolio = []/None
                                    if portfolio:

                                        # fetch positions for all instruments
                                        positions_all: list = reading_from_database[
                                            "positions_from_sub_account"
                                        ]
                                        size_from_positions: float = 0 if positions_all == [] else sum(
                                            [o["size"] for o in positions_all]
                                        )

                                        my_trades_open_sqlite: dict = await sqlite_management.querying_table(
                                            "my_trades_all_json"
                                        )
                                        my_trades_open: list = my_trades_open_sqlite["list_data_only"]

                                        instrument_transactions = [f"{currency.upper()}-PERPETUAL"]
                                        server_time = await current_server_time()
                                        
                                        log.error(f"market_condition {market_condition}")

                                        for instrument in instrument_transactions:
                                            await opening_transactions(
                                                instrument,
                                                portfolio,
                                                strategies,
                                                my_trades_open_sqlite,
                                                size_from_positions,
                                                server_time,
                                                market_condition,
                                            )
                                    

                                if (
                                    message_channel
                                    == "chart.trades.ETH-PERPETUAL.30"
                                ):

                                    last_tick30_fr_sqlite =  await last_tick_fr_sqlite(
                                        last_tick_query_ohlc30
                                    )

                                    if (
                                        last_tick30_fr_sqlite
                                        == last_tick_fr_data_orders
                                    ):

                                        await sqlite_management.deleting_row(
                                            TABLE_OHLC30,
                                            DATABASE,
                                            WHERE_FILTER_TICK,
                                            "=",
                                            last_tick30_fr_sqlite,
                                        )

                                        await sqlite_management.insert_tables(
                                            TABLE_OHLC30, data_orders
                                        )

                                    else:
                                        await sqlite_management.insert_tables(
                                            TABLE_OHLC30, data_orders
                                        )

                                if (
                                    message_channel
                                    == "chart.trades.ETH-PERPETUAL.60"
                                ):

                                    last_tick60_fr_sqlite = await last_tick_fr_sqlite(
                                        last_tick_query_ohlc60
                                    )

                                    if (
                                        last_tick60_fr_sqlite
                                        == last_tick_fr_data_orders
                                    ):

                                        await sqlite_management.deleting_row(
                                            TABLE_OHLC60,
                                            DATABASE,
                                            WHERE_FILTER_TICK,
                                            "=",
                                            last_tick60_fr_sqlite,
                                        )

                                        await sqlite_management.insert_tables(
                                            TABLE_OHLC60, data_orders
                                        )

                                    else:
                                        await sqlite_management.insert_tables(
                                            TABLE_OHLC60, data_orders
                                        )

                                if (
                                    message_channel
                                    == "chart.trades.ETH-PERPETUAL.1D"
                                ):

                                    last_tick1D_fr_sqlite = await last_tick_fr_sqlite(
                                        last_tick_query_ohlc1D
                                    )

                                    if (
                                        last_tick1D_fr_sqlite
                                        == last_tick_fr_data_orders
                                    ):

                                        await sqlite_management.deleting_row(
                                            TABLE_OHLC1D,
                                            DATABASE,
                                            WHERE_FILTER_TICK,
                                            "=",
                                            last_tick1D_fr_sqlite,
                                        )

                                        await sqlite_management.insert_tables(
                                            TABLE_OHLC1D, data_orders
                                        )

                                    else:
                                        await sqlite_management.insert_tables(
                                            TABLE_OHLC1D, data_orders
                                        )

                        instrument_ticker = (message_channel)[19:]
                        if (
                            message_channel
                            == f"incremental_ticker.{instrument_ticker}"
                        ):
                            #log.warning(message_channel)
                            my_path_futures_analysis = system_tools.provide_path_for_file(
                                "futures_analysis", currency
                            )

                            my_path_ticker = system_tools.provide_path_for_file(
                                "ticker", instrument_ticker
                            )

                            try:

                                if "PERPETUAL" in data_orders["instrument_name"]:
                                    #log.info(data_orders)

                                    if "open_interest" in data_orders:

                                        open_interest = data_orders["open_interest"]

                                        await sqlite_management.replace_row(
                                            open_interest,
                                            "open_interest",
                                            TABLE_OHLC1,
                                            DATABASE,
                                            WHERE_FILTER_TICK,
                                            "is",
                                            last_tick1_fr_sqlite,
                                        )
                                        
                                            
                                        await self.distribute_ticker_result_as_per_data_type(
                                            my_path_ticker, data_orders, instrument_ticker
                                        )
                                            
                                        if portfolio:

                                            # fetch positions for all instruments
                                            positions_all: list = reading_from_database[
                                                "positions_from_sub_account"
                                            ]
                                            size_from_positions: float = 0 if positions_all == [] else sum(
                                                [o["size"] for o in positions_all]
                                            )

                                            my_trades_open_sqlite: dict = await sqlite_management.querying_table(
                                                "my_trades_all_json"
                                            )
                                            my_trades_open: list = my_trades_open_sqlite["list_data_only"]

                                            # clean up transactions all
                                            my_trades_open = [o for o in my_trades_open if "label" in o]

                                            my_trades_open_remove_closed_labels = (
                                                []
                                                if my_trades_open == []
                                                else [o for o in my_trades_open if "closed" not in o["label"]]
                                            )
                                            label_transaction_net = (
                                                []
                                                if my_trades_open_remove_closed_labels == []
                                                else str_mod.remove_redundant_elements(
                                                    [
                                                        str_mod.parsing_label(o["label"])["transaction_net"]
                                                        for o in my_trades_open_remove_closed_labels
                                                    ]
                                                )
                                            )
                                            
                                            log.error(f"market_condition {market_condition}")

                                            await closing_transactions(
                                                label_transaction_net,
                                                portfolio,
                                                strategies,
                                                my_trades_open_sqlite,
                                                my_trades_open,
                                                size_from_positions,
                                                market_condition,
                                                currency,
                                            )
                                            my_trades_open_all: list = my_trades_open_sqlite["all"]
                                            await clean_up_closed_transactions(
            my_trades_open_all
        )

                                symbol_index: str = f"{currency}_usd"
                                my_path_index: str = system_tools.provide_path_for_file(
                                    "index", symbol_index
                                )
                                index_price: list = pickling.read_data(
                                    my_path_index
                                )
                                ticker_instrument: list = pickling.read_data(
                                    my_path_ticker
                                )
                                #log.error(ticker_instrument)
                                if ticker_instrument != []:
                                    
                                    instrument_name = ticker_instrument[0][
                                        "instrument_name"
                                    ]
                                    instrument: list = [
                                        o
                                        for o in instruments_kind
                                        if o["instrument_name"] == instrument_name
                                    ][0]

                                    # combine analysis of each instrument futures result
                                    tickers = futures_analysis.combining_individual_futures_analysis(
                                        index_price[0]["price"],
                                        instrument,
                                        ticker_instrument[0],
                                    )
                                    ticker_all: list = pickling.read_data(
                                        my_path_futures_analysis
                                    )

                                    if ticker_all == None:
                                        pickling.replace_data(
                                            my_path_futures_analysis, ticker_all
                                        )
                                    else:
                                        ticker_all: list = [
                                            o
                                            for o in ticker_all
                                            if o["instrument_name"]
                                            != instrument_ticker
                                        ]

                                        #! double file operation. could be further improved
                                        pickling.replace_data(
                                            my_path_futures_analysis, ticker_all
                                        )

                                        pickling.append_and_replace_items_based_on_qty(
                                            my_path_futures_analysis, tickers, 100
                                        )

                            except Exception as error:
                                log.error(error)
                                await system_tools.raise_error_message(
                                    "WebSocket connection - failed to process data"
                                )

                                continue

            else:
                    
                # Establish restart procedure
                await self.on_restart()
            
                log.info("WebSocket connection has broken.")
                await system_tools.raise_error_message(
                    "error-WebSocket connection EXCHANGE has broken",
                    0.1,
                    "WebSocket connection EXCHANGE has broken",
                )


    async def distribute_ticker_result_as_per_data_type(
        self, my_path_ticker, data_orders, instrument
    ) -> None:
        """ """

        try:
            # ticker: list = pickling.read_data(my_path_ticker)

            if data_orders["type"] == "snapshot":
                pickling.replace_data(my_path_ticker, data_orders)

                # ticker_fr_snapshot: list = pickling.read_data(my_path_ticker)

            else:
                ticker_change: list = pickling.read_data(my_path_ticker)
                if ticker_change != []:
                    # log.debug (ticker_change)

                    for item in data_orders:
                        ticker_change[0][item] = data_orders[item]
                        pickling.replace_data(my_path_ticker, ticker_change)

        except Exception as error:
            await system_tools.raise_error_message(
                error,
                "WebSocket connection - failed to distribute_incremental_ticker_result_as_per_data_type",
            )

    async def on_restart(self) -> None:
        """
        """
        import deribit_get

        log.warning("Cancelling all orders")
        msg= deribit_get.get_cancel_order_all()
        await self.websocket_client.send(json.dumps(msg))

    async def deleting_cancel_order(
        self, table: list, database: str, data, cancelled_order
    ) -> list:
        """ """
        result = await sqlite_management.deleting_row(
            table, database, data, "=", cancelled_order
        )
        return result

    def appending_data(self, data: dict, my_path_all: str) -> None:
        """
        """

        if isinstance(data, list):
            for dt in data:
                pickling.append_data(my_path_all, dt, True)
        else:
            pickling.append_data(my_path_all, data, True)

    async def establish_heartbeat(self) -> None:
        """
        Requests DBT's `public/set_heartbeat` to
        establish a heartbeat connection.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 9098,
            "method": "public/set_heartbeat",
            "params": {"interval": 10},
        }

        try:
            await self.websocket_client.send(json.dumps(msg))
        except Exception as error:
            log.warning(error)

    async def heartbeat_response(self) -> None:
        """
        Sends the required WebSocket response to
        the Deribit API Heartbeat message.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 8212,
            "method": "public/test",
            "params": {},
        }

        try:
            await self.websocket_client.send(json.dumps(msg))

        except Exception as error:
            log.warning(error)

    async def ws_auth(self) -> None:
        """
        Requests DBT's `public/auth` to
        authenticate the WebSocket Connection.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 9929,
            "method": "public/auth",
            "params": {
                "grant_type": "client_credentials",
                "client_id": self.client_id,
                "client_secret": self.client_secret,
            },
        }

        await self.websocket_client.send(json.dumps(msg))

    async def ws_refresh_auth(self) -> None:
        """
        Requests DBT's `public/auth` to refresh
        the WebSocket Connection's authentication.
        """
        while True:
            if self.refresh_token_expiry_time is not None:
                if datetime.utcnow() > self.refresh_token_expiry_time:
                    msg: dict = {
                        "jsonrpc": "2.0",
                        "id": 9929,
                        "method": "public/auth",
                        "params": {
                            "grant_type": "refresh_token",
                            "refresh_token": self.refresh_token,
                        },
                    }

                    await self.websocket_client.send(json.dumps(msg))

            await asyncio.sleep(150)

    async def ws_operation(
        self, operation: str, ws_channel: str, id: int = 100
    ) -> None:
        """
        Requests `public/subscribe` or `public/unsubscribe`
        to DBT's API for the specific WebSocket Channel.
        """
        await asyncio.sleep(5)

        id = id_numbering.id(operation, ws_channel)

        msg: dict = {
            "jsonrpc": "2.0",
            "method": f"private/{operation}",
            "id": id,
            "params": {"channels": [ws_channel]},
        }

        log.info(ws_channel)
        await self.websocket_client.send(json.dumps(msg))


def main():
    sub_account = "deribit-147691"
    client_id: str = parse_dotenv(sub_account)["client_id"]
    client_secret: str = parse_dotenv(sub_account)["client_secret"]

    try:
        StreamAccountData(client_id=client_id, client_secret=client_secret)

    except Exception as error:
        system_tools.catch_error_message(
            error, 10, "app"
        )


if __name__ == "__main__":
    try:
        main()

    except (KeyboardInterrupt, SystemExit):
        asyncio.get_event_loop().run_until_complete(main().stop_ws())

    except Exception as error:
        system_tools.catch_error_message(
            error, 10, "app"
        )
