#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# built ins
from datetime import datetime, timedelta
import aioschedule as schedule
import asyncio
import json

# installed
import websockets
import orjson
from loguru import logger as log

# user defined formula
from utilities.pickling import (
    replace_data,
    read_data)
from utilities.system_tools import (
    provide_path_for_file,
    raise_error_message,
    catch_error_message)
from utilities.string_modification import (
    parsing_label,
    extract_currency_from_text)
from configuration import id_numbering, config
from db_management.sqlite_management import (
    update_status_closed_trades,
    replace_row,
    querying_last_open_interest,
    deleting_row,
    querying_arithmetic_operator,
    querying_table,insert_tables,
    executing_query_with_return)
from websocket_management.ws_management import (
    resupply_sub_accountdb,
    cancel_the_cancellables)
from websocket_management.cleaning_up_transactions import (
    check_if_transaction_has_closed_label_before)
from strategies.basic_strategy import (
    get_additional_params_for_open_label,
    querying_label_and_size,
    is_order_has_sent_before,
    is_everything_consistent)


def parse_dotenv(sub_account) -> dict:
    return config.main_dotenv(sub_account)

async def telegram_bot_sendtext(bot_message, purpose: str = "general_error") -> None:
    import deribit_get

    return await deribit_get.telegram_bot_sendtext(bot_message, purpose)

async def convert_status_has_closed_label_from_no_to_yes(label: str = "general_error") -> None:

    label_integer= parsing_label (label) ["int"]
    transactions_all: list = await querying_label_and_size("my_trades_all_json")

    has_closed_label = check_if_transaction_has_closed_label_before (transactions_all, label_integer)
    
    if not has_closed_label or has_closed_label==0:
        await update_status_closed_trades(label_integer)


async def manage_trades (trades: dict) -> None:

    for trade in trades:
            
        label=trade["label"]

        label_has_exist_before= await is_order_has_sent_before(label)

        log.info(f"trade {trade} order_has_sent_before {label_has_exist_before} not {not label_has_exist_before}")

        if not label_has_exist_before:
            try:
                if "open" in label:
                    await get_additional_params_for_open_label (trade, label)

                if "closed" in label:
                    await convert_status_has_closed_label_from_no_to_yes(label)

            except:
                log.critical(f"except trade {trade}")
                
            await insert_tables("my_trades_all_json", trade)

        
async def manage_positions (positions: dict, currency: str) -> None:

    my_path_position = provide_path_for_file("positions", currency)
    replace_data(my_path_position, positions)
        
async def update_portfolio(data_orders, currency) -> None:

    my_path_portfolio = provide_path_for_file("portfolio", currency)
    replace_data(my_path_portfolio, data_orders)

async def update_user_changes(data_orders, my_trades_open_sqlite, currency) -> None:
    
    log.info(f"update_user_changes-START")
    #log.info (data_orders)

    positions = data_orders["positions"]
    trades = data_orders["trades"]
    orders = data_orders["orders"]
    
    if trades:
        log.error (f"trades {trades}")
        
        await manage_trades (trades)
        
    if orders:
        from transaction_management.deribit.open_orders_management import manage_orders

        await manage_orders (orders)
        for order in orders:
                    
            label=order["label"]

            label_has_exist_before= await is_order_has_sent_before(label)

            if label_has_exist_before:
                await cancel_the_cancellables()

            everything_consistent= is_everything_consistent(order)
            log.critical (f' ORDERS everything_consistent {everything_consistent} everything_NOT_consistent {not everything_consistent}')
            
            if  not everything_consistent:
                await cancel_the_cancellables()
                await telegram_bot_sendtext('size or open order is inconsistent', "general_error")

    if positions:
        await manage_positions (positions, currency)
    
    log.info(f"update_user_changes-END")


async def last_open_interest_fr_sqlite(last_tick_query_ohlc1) -> float:
    """ """
    try:
        last_open_interest = await executing_query_with_return(last_tick_query_ohlc1)

    except Exception as error:
        await raise_error_message(
            error,
            "Capture market data - failed to fetch last open_interest",
        )
    return last_open_interest[0]["open_interest"]


async def last_tick_fr_sqlite(last_tick_query_ohlc1) -> int:
    """ """
    try:
        last_tick1_fr_sqlite = await executing_query_with_return(last_tick_query_ohlc1)

    except Exception as error:
        await raise_error_message(
            error,
            "Capture market data - failed to fetch last_tick_fr_sqlite",
        )
    return last_tick1_fr_sqlite[0]["MAX (tick)"]

class StreamAccountData:

    """

    +----------------------------------------------------------------------------------------------+
    +----------------------------------------------------------------------------------------------+

    """

    def __init__(self, client_id: str, client_secret: str, live=True) -> None:
        # Async Event Loop
        self.loop = asyncio.get_event_loop()

        if not live:
            self.ws_connection_url: str = "wss://test.deribit.com/ws/api/v2"
        elif live:
            self.ws_connection_url: str = "wss://www.deribit.com/ws/api/v2"
        else:
            raise Exception("live must be a bool, True=real, False=paper")

        # Instance Variables
        self.connection_url: str = (
            "https://www.deribit.com/api/v2/"
            if "test" not in self.ws_connection_url
            else "https://test.deribit.com/api/v2/"
        )
        self.client_id: str = client_id
        self.client_secret: str = client_secret
        self.websocket_client: websockets.WebSocketClientProtocol = None
        self.refresh_token: str = None
        self.refresh_token_expiry_time: int = None
            
        # Start Primary Coroutine
        self.loop.run_until_complete(self.ws_manager())

    # @lru_cache(maxsize=None)
    async def ws_manager(self) -> None:
        async with websockets.connect(
            self.ws_connection_url,
            ping_interval=None,
            compression=None,
            close_timeout=60,
        ) as self.websocket_client:
            
            while True:
                
                # Authenticate WebSocket Connection
                await self.ws_auth()

                # Establish restart procedure
                await self.on_restart()
                
                # Establish Heartbeat
                await self.establish_heartbeat()

                # Start Authentication Refresh Task
                self.loop.create_task(self.ws_refresh_auth())

                currencies = ["ETH", "BTC"]
                # for currency in currencies: isu, multiple currency could interfere each other in the calculation function
                currency = "ETH"

                my_path_instruments = provide_path_for_file(
                    "instruments", currency
                )
            
                instruments_raw = read_data(my_path_instruments)
                instruments = instruments_raw[0]["result"]

                instruments_kind: list = [
                    o for o in instruments if o["kind"] == "future"
                ]

                instruments_name: list = [
                    o["instrument_name"] for o in instruments_kind
                ]
                # instruments_name: list =  [o['instrument_name'] for o in instruments if o['kind'] == 'future']

                for instrument in instruments_name:

                    self.loop.create_task(
                        self.ws_operation(
                            operation="subscribe",
                            ws_channel=f"incremental_ticker.{instrument}",
                        )
                    )

                    if "PERPETUAL" in instrument:
                        self.loop.create_task(
                            self.ws_operation(
                                operation="subscribe",
                                ws_channel=f"chart.trades.{instrument}.1",
                            )
                        )
                        self.loop.create_task(
                            self.ws_operation(
                                operation="subscribe",
                                ws_channel=f"chart.trades.{instrument}.30",
                            )
                        )
                        self.loop.create_task(
                            self.ws_operation(
                                operation="subscribe",
                                ws_channel=f"chart.trades.{instrument}.60",
                            )
                        )
                        self.loop.create_task(
                            self.ws_operation(
                                operation="subscribe",
                                ws_channel=f"chart.trades.{instrument}.1D",
                            )
                        )
                        
                self.loop.create_task(
                    self.ws_operation(
                        operation="subscribe", ws_channel=f"user.portfolio.{currency}"
                    )
                )

                self.loop.create_task(
                    self.ws_operation(
                        operation="subscribe",
                        ws_channel=f"user.changes.any.{currency.upper()}.raw",
                    )
                )
                while self.websocket_client.open:
                    # Receive WebSocket messages
                    message: bytes = await self.websocket_client.recv()
                    message: dict = orjson.loads(message)
                    message_channel: str = None
                    # log.warning (message)
                    if "id" in list(message):
                        if message["id"] == 9929:
                            
                            if self.refresh_token is None:
                                # await syn.get_sub_accounts()
                                log.info("Successfully authenticated WebSocket Connection")

                            else:
                                log.info(
                                    "Successfully refreshed the authentication of the WebSocket Connection"
                                )

                            self.refresh_token = message["result"]["refresh_token"]

                            # Refresh Authentication well before the required datetime
                            if message["testnet"]:
                                expires_in: int = 300
                            else:
                                expires_in: int = message["result"]["expires_in"] - 240

                            self.refresh_token_expiry_time = datetime.utcnow() + timedelta(
                                seconds=expires_in
                            )

                        elif message["id"] == 8212:
                            # Avoid logging Heartbeat messages
                            continue

                    elif "method" in list(message):
                        # Respond to Heartbeat Message
                        if message["method"] == "heartbeat":
                            await self.heartbeat_response()

                    if "params" in list(message):
                        if message["method"] != "heartbeat":
                            message_channel = message["params"]["channel"]
                            #log.debug(message_channel)
#                            if "PERPETUAL." in message_channel:
#                                log.critical(message_channel)

                            data_orders: list = message["params"]["data"]
                            #log.info(data_orders)
                            currency: str = extract_currency_from_text(
                                message_channel
                            )
                            #! ########################################################################################################################

                            if message_channel == f"user.portfolio.{currency.lower()}":

                                await update_portfolio(data_orders, currency)

                                await resupply_sub_accountdb(currency)                               

                            if (
                                message_channel
                                == f"user.changes.any.{currency.upper()}.raw"
                            ):
                                log.info(data_orders)
                                
                                my_trades_open_sqlite: dict = await querying_table("my_trades_all_json")

                                await update_user_changes(data_orders, my_trades_open_sqlite, currency)

                                await resupply_sub_accountdb(currency)
                            
                            DATABASE: str = "databases/trading.sqlite3"
                            TABLE_OHLC1: str = "ohlc1_eth_perp_json"
                            TABLE_OHLC30: str = "ohlc30_eth_perp_json"
                            TABLE_OHLC60: str = "ohlc60_eth_perp_json"
                            TABLE_OHLC1D: str = "ohlc1D_eth_perp_json"
                            WHERE_FILTER_TICK: str = "tick"

                            last_tick_query_ohlc1: str = querying_arithmetic_operator(
                                "tick", "MAX", TABLE_OHLC1
                            )

                            last_tick_query_ohlc30: str = querying_arithmetic_operator(
                                "tick", "MAX", TABLE_OHLC30
                            )
                            last_tick_query_ohlc60: str = querying_arithmetic_operator(
                                "tick", "MAX", TABLE_OHLC60
                            )

                            last_tick_query_ohlc1D: str = querying_arithmetic_operator(
                                "tick", "MAX", TABLE_OHLC1D
                            )

                            last_tick1_fr_sqlite: int = await last_tick_fr_sqlite(
                                last_tick_query_ohlc1
                            )
                                                      
                            if "chart.trades.ETH-PERPETUAL." in message_channel:
                             
                                last_tick_fr_data_orders: int = data_orders["tick"]

                                if (
                                    TABLE_OHLC30 != None
                                    or TABLE_OHLC1 != None
                                    or TABLE_OHLC60 != None
                                    or TABLE_OHLC1 != None
                                ):

                                    if (
                                        message_channel
                                        == "chart.trades.ETH-PERPETUAL.1"
                                    ):
                                        
                                        # refilling current ohlc table with updated data
                                        if (
                                            last_tick1_fr_sqlite
                                            == last_tick_fr_data_orders
                                        ):

                                            await replace_row(
                                                data_orders,
                                                "data",
                                                TABLE_OHLC1,
                                                DATABASE,
                                                WHERE_FILTER_TICK,
                                                "is",
                                                last_tick1_fr_sqlite,
                                            )

                                        # new tick ohlc
                                        else:

                                            # prepare query
                                            open_interest_last_value_query = querying_last_open_interest(
                                                last_tick1_fr_sqlite, TABLE_OHLC1
                                            )

                                            # get current oi
                                            open_interest_last_value =  await last_open_interest_fr_sqlite(
                                                open_interest_last_value_query
                                            )

                                            # insert new ohlc data
                                            await insert_tables(
                                                TABLE_OHLC1, data_orders
                                            )

                                            # update last tick
                                            last_tick1_fr_sqlite =  await last_tick_fr_sqlite(
                                                last_tick_query_ohlc1
                                            )

                                            # insert open interest in previous tick to the new tick
                                            await replace_row(
                                                open_interest_last_value,
                                                "open_interest",
                                                TABLE_OHLC1,
                                                DATABASE,
                                                WHERE_FILTER_TICK,
                                                "is",
                                                last_tick1_fr_sqlite,
                                            )
                                        
                                    if (
                                        message_channel
                                        == "chart.trades.ETH-PERPETUAL.30"
                                    ):

                                        last_tick30_fr_sqlite =  await last_tick_fr_sqlite(
                                            last_tick_query_ohlc30
                                        )

                                        if (
                                            last_tick30_fr_sqlite
                                            == last_tick_fr_data_orders
                                        ):

                                            await deleting_row(
                                                TABLE_OHLC30,
                                                DATABASE,
                                                WHERE_FILTER_TICK,
                                                "=",
                                                last_tick30_fr_sqlite,
                                            )

                                            await insert_tables(
                                                TABLE_OHLC30, data_orders
                                            )

                                        else:
                                            await insert_tables(
                                                TABLE_OHLC30, data_orders
                                            )

                                    if (
                                        message_channel
                                        == "chart.trades.ETH-PERPETUAL.60"
                                    ):

                                        last_tick60_fr_sqlite = await last_tick_fr_sqlite(
                                            last_tick_query_ohlc60
                                        )

                                        if (
                                            last_tick60_fr_sqlite
                                            == last_tick_fr_data_orders
                                        ):

                                            await deleting_row(
                                                TABLE_OHLC60,
                                                DATABASE,
                                                WHERE_FILTER_TICK,
                                                "=",
                                                last_tick60_fr_sqlite,
                                            )

                                            await insert_tables(
                                                TABLE_OHLC60, data_orders
                                            )

                                        else:
                                            await insert_tables(
                                                TABLE_OHLC60, data_orders
                                            )

                                    if (
                                        message_channel
                                        == "chart.trades.ETH-PERPETUAL.1D"
                                    ):

                                        last_tick1D_fr_sqlite = await last_tick_fr_sqlite(
                                            last_tick_query_ohlc1D
                                        )

                                        if (
                                            last_tick1D_fr_sqlite
                                            == last_tick_fr_data_orders
                                        ):

                                            await deleting_row(
                                                TABLE_OHLC1D,
                                                DATABASE,
                                                WHERE_FILTER_TICK,
                                                "=",
                                                last_tick1D_fr_sqlite,
                                            )

                                            await insert_tables(
                                                TABLE_OHLC1D, data_orders
                                            )

                                        else:
                                            await insert_tables(
                                                TABLE_OHLC1D, data_orders
                                            )

                            instrument_ticker = (message_channel)[19:]
                            if (
                                message_channel
                                == f"incremental_ticker.{instrument_ticker}"
                            ):
                                #log.warning(message_channel)
                                my_path_futures_analysis = provide_path_for_file(
                                    "futures_analysis", currency
                                )

                                my_path_ticker = provide_path_for_file(
                                    "ticker", instrument_ticker
                                )

                                try:

                                    if "PERPETUAL" in data_orders["instrument_name"]:
                                        #log.info(data_orders)

                                        if "open_interest" in data_orders:

                                            open_interest = data_orders["open_interest"]

                                            await replace_row(
                                                open_interest,
                                                "open_interest",
                                                TABLE_OHLC1,
                                                DATABASE,
                                                WHERE_FILTER_TICK,
                                                "is",
                                                last_tick1_fr_sqlite,
                                            )
                                                                                            
                                            await self.distribute_ticker_result_as_per_data_type(
                                                my_path_ticker, data_orders, instrument_ticker
                                            )
                                                
                                except Exception as error:
                                    log.error(error)
                                    await raise_error_message(
                                        "WebSocket connection - failed to process data"
                                    )

                                    continue

                else:
                
                    log.info("WebSocket connection has broken.")
                    await raise_error_message(
                        "error-WebSocket connection EXCHANGE has broken",
                        0.1,
                        "WebSocket connection EXCHANGE has broken",
                    )
        
                    # Establish restart procedure
                    await self.on_restart()
                
    async def distribute_ticker_result_as_per_data_type(
        self, my_path_ticker, data_orders, instrument
    ) -> None:
        """ """

        try:
            # ticker: list = pickling.read_data(my_path_ticker)

            if data_orders["type"] == "snapshot":
                replace_data(my_path_ticker, data_orders)

                # ticker_fr_snapshot: list = pickling.read_data(my_path_ticker)

            else:
                ticker_change: list = read_data(my_path_ticker)
                if ticker_change != []:
                    # log.debug (ticker_change)

                    for item in data_orders:
                        ticker_change[0][item] = data_orders[item]
                        replace_data(my_path_ticker, ticker_change)

        except Exception as error:
            await raise_error_message(
                error,
                "WebSocket connection - failed to distribute_incremental_ticker_result_as_per_data_type",
            )

    async def on_restart(self) -> None:
        """
        """
        import deribit_get

        log.warning("Cancelling all orders")
        await cancel_the_cancellables()
        #msg= deribit_get.get_cancel_order_all()
        #await self.websocket_client.send(json.dumps(msg))
        
    async def establish_heartbeat(self) -> None:
        """
        Requests DBT's `public/set_heartbeat` to
        establish a heartbeat connection.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 9098,
            "method": "public/set_heartbeat",
            "params": {"interval": 10},
        }

        try:
            await self.websocket_client.send(json.dumps(msg))
        except Exception as error:
            log.warning(error)

    async def heartbeat_response(self) -> None:
        """
        Sends the required WebSocket response to
        the Deribit API Heartbeat message.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 8212,
            "method": "public/test",
            "params": {},
        }

        try:
            await self.websocket_client.send(json.dumps(msg))

        except Exception as error:
            log.warning(error)

    async def ws_auth(self) -> None:
        """
        Requests DBT's `public/auth` to
        authenticate the WebSocket Connection.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 9929,
            "method": "public/auth",
            "params": {
                "grant_type": "client_credentials",
                "client_id": self.client_id,
                "client_secret": self.client_secret,
            },
        }

        await self.websocket_client.send(json.dumps(msg))

    async def ws_refresh_auth(self) -> None:
        """
        Requests DBT's `public/auth` to refresh
        the WebSocket Connection's authentication.
        """
        while True:
            if self.refresh_token_expiry_time is not None:
                if datetime.utcnow() > self.refresh_token_expiry_time:
                    msg: dict = {
                        "jsonrpc": "2.0",
                        "id": 9929,
                        "method": "public/auth",
                        "params": {
                            "grant_type": "refresh_token",
                            "refresh_token": self.refresh_token,
                        },
                    }

                    await self.websocket_client.send(json.dumps(msg))

            await asyncio.sleep(150)

    async def ws_operation(
        self, operation: str, ws_channel: str, id: int = 100
    ) -> None:
        """
        Requests `public/subscribe` or `public/unsubscribe`
        to DBT's API for the specific WebSocket Channel.
        """
        await asyncio.sleep(5)

        id = id_numbering.id(operation, ws_channel)

        msg: dict = {
            "jsonrpc": "2.0",
            "method": f"private/{operation}",
            "id": id,
            "params": {"channels": [ws_channel]},
        }

        #log.info(ws_channel)
        await self.websocket_client.send(json.dumps(msg))

        
async def check_and_save_every_test():
    log.warning("test")

def main():
    # https://www.codementor.io/@jflevesque/python-asynchronous-programming-with-asyncio-library-eq93hghoc
    sub_account = "deribit-147691"
    client_id: str = parse_dotenv(sub_account)["client_id"]
    client_secret: str = parse_dotenv(sub_account)["client_secret"]

    try:
        log.info("test")
        schedule.every(5).seconds.do(check_and_save_every_test)
        StreamAccountData(client_id=client_id, client_secret=client_secret)
        log.error("test")

    except Exception as error:
        catch_error_message(
            error, 10, "app"
        )
        
if __name__ == "__main__":
    try:
        
        main()

    except (KeyboardInterrupt, SystemExit):
        asyncio.get_event_loop().run_until_complete(main().stop_ws())
        

    except Exception as error:
        catch_error_message(
        error, 10, "app"
        )
